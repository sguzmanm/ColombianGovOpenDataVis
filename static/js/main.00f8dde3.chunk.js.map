{"version":3,"sources":["components/Component1/Component1.js","App.js","index.js"],"names":["Component1","props","state","data","URL","choice","myRef","React","createRef","setNavioData","bind","handleChange","handleSubmit","console","log","fetch","this","url","method","then","response","json","setState","catch","err","error","nv","navio","current","addAllAttribs","event","target","value","type","checked","name","newEl","preventDefault","getData","choiceRenderer","length","numData","map","el","total","reduce","a","b","parseInt","average","className","Math","min","max","addElement","onSubmit","htmlFor","id","aria-describedby","placeholder","onChange","style","ref","Component","App","href","ReactDOM","render","document","getElementById"],"mappings":"2WAqIeA,E,YA3Hb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAM,CACTC,KAAK,GACLC,IAAI,GACJC,OAAO,IAGT,EAAKC,MAAQC,IAAMC,YAEnB,EAAKC,aAAa,EAAKA,aAAaC,KAAlB,gBAElB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBAbJ,E,uEAgBR,IAAD,OACPG,QAAQC,IAAI,cACZC,MAAMC,KAAKd,MAAMe,IAAI,CACnBC,OAAO,QACNC,MAAK,SAACC,GACP,OAAOA,EAASC,UACfF,MAAK,SAAAE,GACNR,QAAQC,IAAIO,GACZ,EAAKC,SAAS,CACZnB,KAAKkB,IAEP,EAAKZ,kBACJc,OAAM,SAACC,GACRX,QAAQY,MAAMD,Q,qCAKhBX,QAAQC,IAAI,YACZ,IAAIY,EAAIC,IAAMX,KAAKV,MAAMsB,QAAS,KAGlCF,EAAGvB,KAAKa,KAAKd,MAAMC,MAGnBuB,EAAGG,kB,mCAMQC,GACX,IAAMC,EAASD,EAAMC,OACfC,EAAwB,aAAhBD,EAAOE,KAAsBF,EAAOG,QAAUH,EAAOC,MAC7DG,EAAOJ,EAAOI,KACpBnB,KAAKM,SAAL,eACGa,EAAMH,M,mCAIEF,GACXjB,QAAQC,IAAI,4BAA4BE,KAAKd,MAAMkC,OACnDN,EAAMO,iBACNrB,KAAKsB,Y,+BAKN,IAAD,OACMC,EAAe,KACnB,GAAuB,KAApBvB,KAAKd,MAAMG,QAAwC,IAAzBW,KAAKd,MAAMC,KAAKqC,OAC7C,CACE3B,QAAQC,IAAIE,KAAKd,MAAMC,MACvB,IAAMsC,EAAQzB,KAAKd,MAAMC,KAAKuC,KAAI,SAAAC,GAChC,OAAOA,EAAG,EAAKzC,MAAMG,WAEjBuC,EAAMH,EAAQI,QAAO,SAACC,EAAEC,GAE5B,OADAlC,QAAQC,IAAI,MAAMgC,GAEhBE,SAASF,EAAE,IAAME,SAASD,EAAE,OAG1BE,EAAUL,EAAO5B,KAAKd,MAAMC,KAAKqC,OACvCD,EACE,yBAAKW,UAAU,IACb,oCAAUN,GACV,sCAAYK,GACZ,kCAAQE,KAAKC,IAAL,MAAAD,KAAI,YAAQV,KACpB,kCAAQU,KAAKE,IAAL,MAAAF,KAAI,YAAQV,MAK1B,IAAMa,EACJ,0BAAMC,SAAUvC,KAAKJ,cACnB,yBAAKsC,UAAU,cACb,2BAAOM,QAAQ,cAAf,gBACA,2BAAOrB,KAAK,MAAMe,UAAU,eAAeO,GAAG,aAAaC,mBAAiB,OAAOC,YAAY,iBAAiB3B,MAAOhB,KAAKd,MAAMe,IAAK2C,SAAU5C,KAAKL,eACtJ,2BAAO8C,GAAG,OAAOP,UAAU,wBAA3B,0DAEA,2BAAOM,QAAQ,eAAf,gCACA,2BAAOrB,KAAK,SAASe,UAAU,eAAeO,GAAG,cAAcC,mBAAiB,aAAaC,YAAY,qCAAqC3B,MAAOhB,KAAKd,MAAMG,OAAQuD,SAAU5C,KAAKL,eACvL,2BAAO8C,GAAG,aAAaP,UAAU,wBAAjC,2DAEF,4BAAQjB,KAAK,SAASiB,UAAU,mBAAhC,QAGJ,OACE,yBAAKA,UAAU,mBACZI,EACD,yBAAKJ,UAAU,OACb,yBAAKA,UAAU,kBAAkBW,MAAO,CAAC,aAAa,QAASC,IAAK9C,KAAKV,QAEzE,yBAAK4C,UAAU,mBACZX,S,GAhHYwB,aCQVC,MAXf,WACE,OACE,yBAAKd,UAAU,OACb,2EACA,mGAAwE,uBAAGe,KAAK,IAAR,kBAAxE,uBACA,oKACC,kBAAC,EAAD,QCNPC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.00f8dde3.chunk.js","sourcesContent":["import React,{Component} from \"react\";\r\nimport \"./Component1.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport navio from \"navio\";\r\n\r\n\r\nclass Component1 extends Component{\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      data:[],\r\n      URL:\"\",\r\n      choice:\"\"\r\n    };\r\n\r\n    this.myRef = React.createRef();\r\n\r\n    this.setNavioData=this.setNavioData.bind(this);\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);    \r\n  }\r\n\r\n  getData(){\r\n    console.log(\"Fetch data\");\r\n    fetch(this.state.url,{\r\n      method:\"GET\"\r\n    }).then((response)=>{\r\n      return response.json();\r\n    }).then(json=>{\r\n      console.log(json);\r\n      this.setState({\r\n        data:json\r\n      });\r\n      this.setNavioData();\r\n    }).catch((err)=>{\r\n      console.error(err);\r\n    });\r\n  }\r\n\r\n  setNavioData(){\r\n    console.log(\"SET DATA\");\r\n    let nv= navio(this.myRef.current, 600);\r\n\r\n    // NAVIO Step 2. Load your data!\r\n    nv.data(this.state.data);\r\n\r\n    // NAVIO Step 3. Detect your attributes (or load them manually)\r\n    nv.addAllAttribs();\r\n\r\n\r\n\r\n  }\r\n\r\n  handleChange(event) {\r\n    const target = event.target;\r\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\r\n    const name = target.name;\r\n    this.setState({\r\n      [name]:value\r\n    });\r\n  }\r\n    \r\n  handleSubmit(event) {\r\n    console.log(\"A new val was submitted: \",this.state.newEl);\r\n    event.preventDefault();\r\n    this.getData();\r\n  }\r\n\r\n\r\n  render()\r\n  {\r\n    let choiceRenderer=null;\r\n    if(this.state.choice!==\"\" && this.state.data.length!==0)\r\n    {\r\n      console.log(this.state.data);\r\n      const numData=this.state.data.map(el=>{\r\n        return el[this.state.choice];\r\n      });\r\n      const total=numData.reduce((a,b) => {\r\n        console.log(\"OPT\",a);\r\n        return(\r\n          parseInt(a,10) + parseInt(b,10)\r\n        );\r\n      });\r\n      const average=  total/ this.state.data.length;\r\n      choiceRenderer=(\r\n        <div className=\"\">\r\n          <p>Total {total}</p>\r\n          <p>Average {average}</p>\r\n          <p>Min {Math.min(...numData) }</p>\r\n          <p>Max {Math.max(...numData) }</p>\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    const addElement = (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"inputTitle\">Your dataset</label>\r\n          <input name=\"url\" className=\"form-control\" id=\"inputTitle\" aria-describedby=\"help\" placeholder=\"Enter your url\" value={this.state.url} onChange={this.handleChange}/>\r\n          <small id=\"help\" className=\"form-text text-muted\">Please put the URL for getting data from DatosAbiertos</small>\r\n\r\n          <label htmlFor=\"inputChoice\">Your numeric field of choice</label>\r\n          <input name=\"choice\" className=\"form-control\" id=\"inputChoice\" aria-describedby=\"choiceHelp\" placeholder=\"Enter your numeric filed of choice\" value={this.state.choice} onChange={this.handleChange}/>\r\n          <small id=\"choiceHelp\" className=\"form-text text-muted\">Please put the URL for getting data from DatosAbiertos</small>\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\">Get</button>\r\n      </form>\r\n    );\r\n    return(\r\n      <div className=\"container-fluid\">\r\n        {addElement}\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-sm-6\" style={{\"text-align\":\"left\"}} ref={this.myRef}>\r\n          </div>\r\n          <div className=\"col-12 col-sm-6\">\r\n            {choiceRenderer}\r\n          </div>\r\n        </div>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nComponent1.propTypes={\r\n  description:PropTypes.any\r\n};\r\n\r\nexport default Component1;","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport Component1 from \"./components/Component1/Component1.js\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Colombian Government Open Data Visualizator</h1>\r\n      <p>Hi, for this prototype all you need to do is input an API link from: <a href=\"\">Datos Abiertos</a> in the first field</p>\r\n      <p>If you want to get meaningful stats from  any numeric fields please fill the second field with the name of that component in the data</p>\r\n      {<Component1/>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}